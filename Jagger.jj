// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
public class Jagger
{
    public static void main(String args[]) throws ParseException
    {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                           // End of line.
|   < STRING: "\"" (~["\""])*  "\"">
|   < LET: "let">
|   < IF: "if">
|   < THEN: "then">
|   < ELSE: "else">
|   < PRINT: "print">
|   < IN: "in">
|   < TO: "to">
|   < END: "end">
|   < VAR: "var">
|   < FOR: "for">
|   < WHILE: "while">
|   < DO: "do">
|   < AFFECT: <VARNAME> (" ")* ":=">
|   < VARNAME: (["a"-"z"]|["A"-"Z"])+ >
|   < COMA: ",">
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Instruction a; }
{

    (a= instruction() <EOL>{

                      PrettyPrinter pp = new PrettyPrinter();
                      a.accept(pp);
                      pp.prettyPrint();
                      TypeChecker t = new TypeChecker();
                      a.accept(t);
                      Eval e = new Eval();
                      a.accept(e);
                    })*

}

Declaration decl():
{Exp a; Token t;}
{
  <VAR> t=<AFFECT> a=expression() {return new Declaration(t.toString().replaceAll(" ","").replaceAll(":","").replaceAll("=",""),a);}
}

Instruction affectation():
{Token t; Exp a;}
{
  t=<AFFECT> a=expression() {return new Affectation(t.toString().replaceAll(" ","").replaceAll(":","").replaceAll("=",""),a);}
}

Instruction let():
{Declaration a;Instruction b;}
{
  {LetInEnd l = new LetInEnd();}
  <LET> (<EOL>)* ((a=decl(){l.addDecl(a);}) ((<EOL>)+ (a=decl(){l.addDecl(a);} (<EOL>)+)*)?)? <IN> (<EOL>)* (b=instruction(){l.addInstr(b);}) (<COMA>(<EOL>)* b=instruction(){l.addInstr(b);})* (<EOL>)* <END> {return l;}
}

Instruction whileInstr():
{Exp a; Instruction b;}
{{While zzz =null;}
<WHILE> a = expression(){zzz = new While(a);} <DO> (<EOL>)* "(" (b=instruction(){zzz.addInstr(b);}) ("," b=instruction(){zzz.addInstr(b);})* ")"
{return zzz;}
}

Instruction forInstr():
{Exp a,b; Instruction c; Token t;}
{
{While zzz = null;LetInEnd lend =new LetInEnd();}
<FOR> t= <AFFECT> a = expression(){lend.addDecl(new Declaration(t.toString().replaceAll(" ","").replaceAll(":","").replaceAll("=",""),a));}
 <TO> b = expression() {zzz = new While( new LessOrEqual(new Variable(t.toString().replaceAll(" ","").replaceAll(":","").replaceAll("=","")),b));}
 <DO>  c=instruction() {
                        zzz.addInstr(c);
                        zzz.addInstr(new Affectation(t.toString().replaceAll(" ","").replaceAll(":","").replaceAll("=",""),new Add(new Variable(t.toString().replaceAll(" ","").replaceAll(":","").replaceAll("=","")),new Int(1))));
                        lend.addInstr(zzz);
                        return lend;
                       }
}

Instruction instruction():
{Exp e;Token t; Instruction i; }
{

  i = affectation(){return i;}
  |<PRINT>"(" e = expression()")"{return new Print(e);}
  |i =let() {return i;}
  |i = whileInstr() {return i;}
  |i = forInstr() {return i;}
  |e = expression() {return new InstrExp(e);}
  }
// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Exp expression():
{ Exp a; }
{
    a=expressionOne() { return a; }
}


// Term.
// T -> F ('*'F | '/'F)*
Exp expressionOne():
{ Exp a,b; }
{
    a=expressionTwo()
    (
    "=="   b = expressionOne() { return new Equals(a,b);     }
    |"!="  b = expressionOne() { return new Different(a,b);  }
    )? { return a; }
}

Exp expressionTwo():
{ Exp a,b; }{
  a=expressionThree()
  (
    "<"   b = expressionTwo() { return new LessThan(a,b);     }
    |"<=" b = expressionTwo() { return new LessOrEqual(a,b);  }
    |">=" b = expressionTwo() { return new GreaterOrEqual(a,b); }
    |">"  b = expressionTwo() { return new GreaterThan(a,b);    }
  )? { return a; }
}

Exp expressionThree():
{ Exp a; }{
  a=expressionFour()
  a=subadd(a){return a;}
}

Exp subadd(Exp a):
{Exp b;}
{
  "+" b=expressionFour()
  a = subadd(new Add(a,b)) {return a;}
  | "-" b= expressionFour()
  a = subadd(new Sub(a,b)) {return a;}
  |{return a;}

}

Exp expressionFour():
{ Exp a,b; }{
  a=expressionFive()
  a=muldiv(a){ return a; }
}

Exp muldiv(Exp a):
{Exp b;}
{
  "*" b=expressionFour()
  a = muldiv(new Mult(a,b)) {return a;}
  | "/" b= expressionFour()
  a = muldiv(new Div(a,b)) {return a;}
  |{return a;}

}

Exp expressionFive():
{ Exp a; }{
  a=expressionSix() { return a; }
  | "-" a=expressionSix()    { return new Negative(a);}
  | "+" a=expressionSix()     { return new Positive(a);}

}
// Factor of an expression.
// F -> <NUMBER> | "(" E ")"

Exp expressionSix():
{ Exp a; Exp b,c,d; }
{
      a=expressionSeven() {return a;}
      | <IF> "(" b = expression() ")" <THEN> "(" c = expression() ")" <ELSE> "(" d = expression() ")"  {return new IfThenElse(b,c,d);}
}


Exp expressionSeven():
{ Token t; Exp e; }
{
    t=<STRING> { return new Strexp(t.toString().replaceAll("\"",""));}
    | t=<NUMBER> { return new Int(Integer.parseInt(t.toString())); }
    | t=<VARNAME>{return new Variable(t.toString());}
    | "(" e=expression() ")" { return e; }

}
